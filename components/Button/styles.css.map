{"version":3,"file":"styles.css","mappings":"AAiQA,+BAuBA,kBApBA,mBAMA,mCACA,YACA,kBAEA,4DAEA,CAVA,4BAWA,eAdA,oBAKA,oBADA,gBAFA,YAQA,aAXA,kBAqBA,0BALA,gFAGA,CACA,0CAbA,qBA2HA,CA1GA,6DACA,kBACA,CAEA,6DACA,eACA,CAEA,6DACA,mDACA,CAEA,6DAGA,eAFA,YACA,4BAWA,CARA,+DACA,eACA,CAEA,2FAEA,UADA,UAEA,CAGA,6DAGA,eAFA,YACA,6BAWA,CARA,+DACA,gBACA,CAEA,2FAEA,UADA,UAEA,CAGA,6DAGA,eAFA,YACA,4BAWA,CARA,+DACA,eACA,CAEA,2FAEA,UADA,UAEA,CAGA,+DACA,aACA,CAEA,6DACA,UACA,CAEA,6DACA,sBACA,CAEA,6DACA,qBACA,CAEA,6DACA,2BACA,6BACA,CAEA,wCACA,WAKA,CAHA,0CACA,UACA,CAGA,qCACA,2EAGA,CAEA,oDAEA,yCADA,iCAEA,CAEA,qDAEA,0CADA,kCAEA,CAEA,6DAEA,2BACA,CAGA,+BAOA,mBAGA,6BANA,WAKA,4BAHA,aAEA,uBAHA,SAJA,kBAEA,UADA,OASA,CAEA,+BAEA,aACA,mBAFA,aAGA,2CAMA,CAEA,8DALA,cAFA,eACA,gBAGA,uBADA,kBAYA,CARA,+BAOA,WANA,2CAOA,CAEA,4FACA,eACA,CAEA,4FACA,gBACA,CCpUA,+BAuBA,kBApBA,mBAMA,mCACA,YACA,kBAEA,4DAEA,CAVA,oCAWA,eAdA,oBAKA,oBADA,gBAFA,YAQA,aAXA,kBAqBA,0BALA,gFAGA,CACA,0CAbA,qBAyCA,CAxBA,6DACA,mDACA,CAEA,6DACA,cACA,CAEA,6DACA,cACA,CAEA,wCACA,WAKA,CAHA,0CACA,UACA,CAGA,6DAEA,2BACA,CAGA,+BAOA,mBAGA,6BANA,WAKA,4BAHA,aAEA,uBAHA,SAJA,kBAEA,UADA,OASA,CAEA,+BAEA,aACA,mBAFA,aAMA,cAFA,eACA,gBAGA,uBADA,mBAJA,2CAMA","sources":["webpack://@square/maker/./src/components/Button/src/Button.vue","webpack://@square/maker/./src/components/Button/src/TextButton.vue"],"sourcesContent":["<template>\n\t<button\n\t\t:class=\"[\n\t\t\t$s.Button,\n\t\t\t$s[`size_${resolvedSize}`],\n\t\t\t$s[`shape_${resolvedShape}`],\n\t\t\t$s[`align_${resolvedAlign}`],\n\t\t\t{\n\t\t\t\t[$s.fullWidth]: resolvedFullWidth,\n\t\t\t\t[$s.iconButton]: isSingleChild(),\n\t\t\t\t[$s.loading]: loading,\n\t\t\t}\n\t\t]\"\n\t\t:type=\"type\"\n\t\t:disabled=\"disabled\"\n\t\t:style=\"style\"\n\t\tv-bind=\"$attrs\"\n\t\tv-on=\"$listeners\"\n\t>\n\t\t<m-loading\n\t\t\tv-if=\"loading\"\n\t\t\t:class=\"$s.Loading\"\n\t\t/>\n\t\t<span :class=\"$s.MainText\">\n\t\t\t<!-- @slot Button label -->\n\t\t\t<slot />\n\t\t</span>\n\n\t\t<span\n\t\t\tv-if=\"$scopedSlots.information\"\n\t\t\t:class=\"$s.InformationText\"\n\t\t>\n\t\t\t<!-- @slot Information label -->\n\t\t\t<slot\n\t\t\t\tname=\"information\"\n\t\t\t/>\n\t\t</span>\n\t</button>\n</template>\n\n<script>\nimport chroma from 'chroma-js';\nimport { MLoading } from '@square/maker/components/Loading';\nimport { MThemeKey, defaultTheme, resolveThemeableProps } from '@square/maker/components/Theme';\nimport getContrast from '@square/maker/utils/get-contrast';\n\nfunction getFocus(chromaColor) {\n\tconst arbitraryAlphaValue = 0.3;\n\treturn chromaColor.alpha(arbitraryAlphaValue);\n}\n\nfunction getHover(chromaColor) {\n\t// mix color with 5% black\n\tconst arbitraryValue = 0.05;\n\treturn chroma.mix(chromaColor, '#000', arbitraryValue);\n}\n\nfunction getActive(chromaColor) {\n\t// mix color with 10% black\n\tconst arbitraryValue = 0.1;\n\treturn chroma.mix(chromaColor, '#000', arbitraryValue);\n}\n\nfunction fill(tokens) {\n\tconst color = chroma(tokens.color);\n\tconst colorHover = getHover(color);\n\tconst colorActive = getActive(color);\n\tconst textColor = tokens.textColor ? chroma(tokens.textColor) : undefined;\n\tconst contrastColor = getContrast(color, textColor);\n\tconst contrastColorHover = getHover(contrastColor);\n\tconst contrastColorActive = getActive(contrastColor);\n\tconst focusColor = getFocus(color);\n\treturn {\n\t\t'--small-padding': '0 16px',\n\t\t'--medium-padding': '0 24px',\n\t\t'--large-padding': '0 32px',\n\t\t'--color-main': color.hex(),\n\t\t'--color-main-hover': colorHover.hex(),\n\t\t'--color-main-active': colorActive.hex(),\n\t\t'--color-contrast': contrastColor.hex(),\n\t\t'--color-contrast-hover': contrastColorHover.hex(),\n\t\t'--color-contrast-active': contrastColorActive.hex(),\n\t\t'--color-focus': focusColor.hex(),\n\t};\n}\n\nfunction outline(tokens) {\n\tconst color = chroma(tokens.color);\n\tconst colorHover = getHover(color);\n\tconst colorActive = getActive(color);\n\tconst focusColor = getFocus(color);\n\treturn {\n\t\t'--small-padding': '0 16px',\n\t\t'--medium-padding': '0 24px',\n\t\t'--large-padding': '0 32px',\n\t\t'--color-main': 'transparent',\n\t\t'--color-main-hover': 'rgba(0, 0, 0, 0.05)',\n\t\t'--color-main-active': 'rgba(0, 0, 0, 0.1)',\n\t\t'--color-contrast': color.hex(),\n\t\t'--color-contrast-hover': colorHover.hex(),\n\t\t'--color-contrast-active': colorActive.hex(),\n\t\t'--color-focus': focusColor.hex(),\n\t\t'--outline-border': 'inset 0 0 0 1px var(--color-contrast)',\n\t};\n}\n\nfunction ghost(tokens) {\n\tconst color = chroma(tokens.color);\n\tconst colorHover = getHover(color);\n\tconst colorActive = getActive(color);\n\tconst focusColor = getFocus(color);\n\treturn {\n\t\t'--small-padding': '0 8px',\n\t\t'--medium-padding': '0 12px',\n\t\t'--large-padding': '0 20px',\n\t\t'--color-main': 'transparent',\n\t\t'--color-main-hover': 'rgba(0, 0, 0, 0.05)',\n\t\t'--color-main-active': 'rgba(0, 0, 0, 0.1)',\n\t\t'--color-contrast': color.hex(),\n\t\t'--color-contrast-hover': colorHover.hex(),\n\t\t'--color-contrast-active': colorActive.hex(),\n\t\t'--color-focus': focusColor.hex(),\n\t};\n}\n\nconst VARIANTS = {\n\tprimary: fill,\n\tsecondary: outline,\n\ttertiary: ghost,\n};\n\n/**\n * Button component\n * @inheritAttrs button\n * @inheritListeners button\n */\nexport default {\n\tcomponents: {\n\t\tMLoading,\n\t},\n\n\tinject: {\n\t\ttheme: {\n\t\t\tdefault: defaultTheme(),\n\t\t\tfrom: MThemeKey,\n\t\t},\n\t},\n\n\tinheritAttrs: false,\n\n\tprops: {\n\t\t/**\n\t\t * Type of the button\n\t\t */\n\t\ttype: {\n\t\t\ttype: String,\n\t\t\tdefault: 'button',\n\t\t},\n\t\t/**\n\t\t * Size of the button\n\t\t */\n\t\tsize: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (size) => ['small', 'medium', 'large'].includes(size),\n\t\t},\n\t\t/**\n\t\t * Whether to make the button full-width\n\t\t */\n\t\tfullWidth: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: undefined,\n\t\t},\n\t\t/**\n\t\t * Background color of button\n\t\t */\n\t\tcolor: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (color) => chroma.valid(color),\n\t\t},\n\t\t/**\n\t\t * Text color of button\n\t\t */\n\t\ttextColor: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (color) => chroma.valid(color),\n\t\t},\n\t\t/**\n\t\t * Semantic variant\n\t\t */\n\t\tvariant: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (variant) => ['primary', 'secondary', 'tertiary'].includes(variant),\n\t\t},\n\t\t/**\n\t\t * Shape of button\n\t\t */\n\t\tshape: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (shape) => ['squared', 'rounded', 'pill'].includes(shape),\n\t\t},\n\t\t/**\n\t\t * Toggles button disabled state\n\t\t */\n\t\tdisabled: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\t/**\n\t\t * How to align button's contents\n\t\t */\n\t\talign: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (variant) => ['center', 'stack', 'space-between'].includes(variant),\n\t\t},\n\t\t/**\n\t\t * Toggles button loading state\n\t\t */\n\t\tloading: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tcomputed: {\n\t\t...resolveThemeableProps('button', ['color', 'size', 'textColor', 'variant', 'shape', 'align', 'fullWidth']),\n\t\tstyle() {\n\t\t\treturn VARIANTS[this.resolvedVariant]({\n\t\t\t\tcolor: this.resolvedColor,\n\t\t\t\ttextColor: this.resolvedTextColor,\n\t\t\t});\n\t\t},\n\t},\n\n\tmethods: {\n\t\tisSingleChild() {\n\t\t\tif (this.$scopedSlots.information) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst empty = 0;\n\t\t\tconst children = (this.$slots.default || []).filter(\n\t\t\t\t(vnode) => vnode.tag || vnode.text.trim().length > empty,\n\t\t\t);\n\t\t\tconst firstChildIndex = 0;\n\t\t\tconst singleChild = 1;\n\t\t\treturn children.length === singleChild && children[firstChildIndex].tag;\n\t\t},\n\t},\n};\n</script>\n\n<style module=\"$s\">\n.Button {\n\tposition: relative;\n\tdisplay: inline-flex;\n\talign-items: center;\n\tmin-width: 0;\n\tcolor: var(--color-contrast);\n\tfont-weight: 500;\n\tfont-family: inherit;\n\tvertical-align: middle;\n\tbackground-color: var(--color-main);\n\tborder: none;\n\tborder-radius: 8px;\n\toutline: none;\n\tbox-shadow:\n\t\tvar(--outline-border, 0 0),\n\t\tvar(--focus-border, 0 0);\n\tcursor: pointer;\n\ttransition:\n\t\tcolor 0.2s ease-in,\n\t\tbackground-color 0.2s ease-in,\n\t\tbox-shadow 0.2s ease-in;\n\tuser-select: none;\n\ttouch-action: manipulation;\n\tfill: currentColor;\n\n\t&.shape_pill {\n\t\tborder-radius: 32px;\n\t}\n\n\t&.shape_squared {\n\t\tborder-radius: 0;\n\t}\n\n\t&.iconButton {\n\t\tmin-width: max-content;\n\t}\n\n\t&.size_small {\n\t\theight: 32px;\n\t\tpadding: var(--small-padding);\n\t\tfont-size: 12px;\n\n\t\t& > * {\n\t\t\tline-height: 1.4;\n\t\t}\n\n\t\t&.iconButton {\n\t\t\twidth: 32px;\n\t\t\tpadding: 0;\n\t\t}\n\t}\n\n\t&.size_medium {\n\t\theight: 48px;\n\t\tpadding: var(--medium-padding);\n\t\tfont-size: 14px;\n\n\t\t& > * {\n\t\t\tline-height: 1.77;\n\t\t}\n\n\t\t&.iconButton {\n\t\t\twidth: 48px;\n\t\t\tpadding: 0;\n\t\t}\n\t}\n\n\t&.size_large {\n\t\theight: 64px;\n\t\tpadding: var(--large-padding);\n\t\tfont-size: 16px;\n\n\t\t& > * {\n\t\t\tline-height: 1.5;\n\t\t}\n\n\t\t&.iconButton {\n\t\t\twidth: 64px;\n\t\t\tpadding: 0;\n\t\t}\n\t}\n\n\t&.iconButton > * {\n\t\tline-height: 0;\n\t}\n\n\t&.fullWidth {\n\t\twidth: 100%;\n\t}\n\n\t&.align_center {\n\t\tjustify-content: center;\n\t}\n\n\t&.align_stack {\n\t\tflex-direction: column;\n\t}\n\n\t&.align_space-between {\n\t\tflex-direction: row-reverse;\n\t\tjustify-content: space-between;\n\t}\n\n\t&:disabled {\n\t\tcursor: initial;\n\n\t\t& > * {\n\t\t\topacity: 0.4;\n\t\t}\n\t}\n\n\t&:focus {\n\t\t--focus-border:\n\t\t\t0 0 0 1px var(--color-300, #fff),\n\t\t\t0 0 0 3px var(--color-focus);\n\t}\n\n\t&:hover:not(:disabled) {\n\t\tcolor: var(--color-contrast-hover);\n\t\tbackground-color: var(--color-main-hover);\n\t}\n\n\t&:active:not(:disabled) {\n\t\tcolor: var(--color-contrast-active);\n\t\tbackground-color: var(--color-main-active);\n\t}\n\n\t&.loading {\n\t\t/* don't inherit color in loading state on hover/active */\n\t\tcolor: transparent !important;\n\t}\n}\n\n.Loading {\n\tposition: absolute;\n\ttop: 4px;\n\tright: 4px;\n\tbottom: 4px;\n\tleft: 4px;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tcolor: var(--color-contrast);\n\tbackground-color: transparent;\n}\n\n.MainText {\n\tdisplay: flex;\n\tgap: 8px;\n\talign-items: center;\n\twidth: max-content;\n\tmax-width: 100%;\n\toverflow: hidden;\n\tline-height: 1;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n}\n\n.InformationText {\n\twidth: min-content;\n\tmax-width: 100%;\n\toverflow: hidden;\n\tline-height: 1;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n\topacity: 0.6;\n}\n\n.Button.align_center .InformationText {\n\tmargin-left: 8px;\n}\n\n.Button.align_space-between .InformationText {\n\tmargin-right: 8px;\n}\n</style>\n","<template>\n\t<button\n\t\t:class=\"[\n\t\t\t$s.Button,\n\t\t\t$s[`size_${size}`],\n\t\t\t{\n\t\t\t\t[$s.loading]: loading,\n\t\t\t}\n\t\t]\"\n\t\t:type=\"type\"\n\t\t:disabled=\"disabled\"\n\t\t:style=\"style\"\n\t\tv-bind=\"$attrs\"\n\t\tv-on=\"$listeners\"\n\t>\n\t\t<m-loading\n\t\t\tv-if=\"loading\"\n\t\t\t:class=\"$s.Loading\"\n\t\t/>\n\t\t<span :class=\"$s.MainText\">\n\t\t\t<!-- @slot Button label -->\n\t\t\t<slot />\n\t\t</span>\n\t</button>\n</template>\n\n<script>\nimport chroma from 'chroma-js';\nimport { MLoading } from '@square/maker/components/Loading';\nimport assert from '@square/maker/utils/assert';\n\nfunction textButton(tokens) {\n\tconst textColor = tokens.color ? chroma(tokens.color) : undefined;\n\treturn {\n\t\t'--color-main': 'color',\n\t\t'--color-contrast': textColor ? textColor.hex() : undefined,\n\t};\n}\n\n/**\n * Button component\n * @inheritAttrs button\n * @inheritListeners button\n */\nexport default {\n\tcomponents: {\n\t\tMLoading,\n\t},\n\n\tinheritAttrs: false,\n\n\tprops: {\n\t\t/**\n\t\t * Type of the button\n\t\t */\n\t\ttype: {\n\t\t\ttype: String,\n\t\t\tdefault: 'button',\n\t\t},\n\t\t/**\n\t\t * Size of the button label text\n\t\t */\n\t\tsize: {\n\t\t\ttype: String,\n\t\t\tdefault: 'medium',\n\t\t\tvalidator: (size) => ['medium', 'large'].includes(size),\n\t\t},\n\t\t/**\n\t\t * Text color of button\n\t\t */\n\t\tcolor: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (color) => chroma.valid(color),\n\t\t},\n\t\t/**\n\t\t * Toggles button disabled state\n\t\t */\n\t\tdisabled: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\t/**\n\t\t * Toggles button loading state\n\t\t */\n\t\tloading: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tcomputed: {\n\t\tstyle() {\n\t\t\treturn textButton({\n\t\t\t\tcolor: this.color,\n\t\t\t});\n\t\t},\n\t},\n\n\tcreated() {\n\t\tassert.warn(this.$slots.default, 'TextButton should be used with a label');\n\t},\n\n};\n</script>\n\n<style module=\"$s\">\n.Button {\n\tposition: relative;\n\tdisplay: inline-flex;\n\talign-items: center;\n\tmin-width: 0;\n\tcolor: var(--color-contrast, inherit);\n\tfont-weight: 500;\n\tfont-family: inherit;\n\tvertical-align: middle;\n\tbackground-color: var(--color-main);\n\tborder: none;\n\tborder-radius: 8px;\n\toutline: none;\n\tbox-shadow:\n\t\tvar(--outline-border, 0 0),\n\t\tvar(--focus-border, 0 0);\n\tcursor: pointer;\n\ttransition:\n\t\tcolor 0.2s ease-in,\n\t\tbackground-color 0.2s ease-in,\n\t\tbox-shadow 0.2s ease-in;\n\tuser-select: none;\n\ttouch-action: manipulation;\n\tfill: currentColor;\n\n\t&.iconButton {\n\t\tmin-width: max-content;\n\t}\n\n\t&.size_medium {\n\t\tfont-size: 14px;\n\t}\n\n\t&.size_large {\n\t\tfont-size: 16px;\n\t}\n\n\t&:disabled {\n\t\tcursor: initial;\n\n\t\t& > * {\n\t\t\topacity: 0.4;\n\t\t}\n\t}\n\n\t&.loading {\n\t\t/* don't inherit color in loading state on hover/active */\n\t\tcolor: transparent !important;\n\t}\n}\n\n.Loading {\n\tposition: absolute;\n\ttop: 4px;\n\tright: 4px;\n\tbottom: 4px;\n\tleft: 4px;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tcolor: var(--color-contrast);\n\tbackground-color: transparent;\n}\n\n.MainText {\n\tdisplay: flex;\n\tgap: 8px;\n\talign-items: center;\n\twidth: max-content;\n\tmax-width: 100%;\n\toverflow: hidden;\n\tline-height: 1;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n}\n</style>\n"],"names":[],"sourceRoot":""}